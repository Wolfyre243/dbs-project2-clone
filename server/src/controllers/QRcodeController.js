// IMPORTS-----------------------------------------------------------------

const AppError = require('../utils/AppError');
const Roles = require('../configs/roleConfig');
const AuditActions = require('../configs/auditActionConfig');
const statusCodes = require('../configs/statusCodes');

const logger = require('../utils/logger');
const catchAsync = require('../utils/catchAsync');
const { encryptData, decryptData } = require('../utils/encryption');

const qrModel = require('../models/QRcodeModel');
const { logAdminAudit } = require('../utils/auditlogs');
const { error } = require('winston');

//========================================================================
// CONTROLLER FUNCTIONS
//========================================================================

module.exports.generateQRCode = catchAsync( async(req, res, next) => {
    try {
        const createdBy = res.locals.user.userId;
        const { exhibitId, imageId } = req.body;

        const { qrCodeId, fileLink, fileName } = await qrModel.generateQRCode(createdBy, exhibitId, imageId);

          await logAdminAudit({
    userId: res.locals.user.userId,
    ipAddress: req.ip,
    entityName: 'qrCode',
    entityId: qrCodeId,
    actionTypeId: AuditActions.CREATE,
    logText: 'QR-code generated successfully',
  });
  logger.info(`QR code with ID ${qrCodeId} generated by ${createdBy}`);

        res.status(201).json({
            status: 'success',
            message: 'QR-code generated successfully',
            data: {
                qrcodeId: qrCodeId,
                fileLink: fileLink,
                fileName: fileName,
            }
        });
    } catch (error) {
        logger.error('Error creating image: ', error);
        console.error(error);
        next(error);

    };
});

module.exports.reGenerateQRcode = catchAsync( async(req, res, next) => {
    try {
        const { qrCodeId } = req.body;
        const createdBy = res.locals.user.userId;

        const { fileLink, fileName } = await qrModel.reGenerateQRcode(qrCodeId, createdBy);

           await logAdminAudit({
    userId: res.locals.user.userId,
    ipAddress: req.ip,
    entityName: 'qrCode',
    entityId: qrCodeId,
    actionTypeId: AuditActions.UPDATE,
    logText: 'QR-code regenerated successfully',
  });

    res.status(200).json({
        status: 'success', 
        message: 'QR-code successfully re-generated',
        data: {
            fileLink: fileLink,
            fileName: fileName,
        }
    });
    } catch (error) {
        logger.error(`ERROR re-generating QR-code:`, error);
        console.error(error);
        next(error);
    }
});

