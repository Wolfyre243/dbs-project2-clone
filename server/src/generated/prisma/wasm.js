/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require("./runtime/index-browser.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9",
};

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
});

exports.Prisma.UsersScalarFieldEnum = {
  userId: "userId",
  username: "username",
  password: "password",
  createdAt: "createdAt",
  modifiedAt: "modifiedAt",
  statusCode: "statusCode",
};

exports.Prisma.StatusScalarFieldEnum = {
  statusCode: "statusCode",
  description: "description",
};

exports.Prisma.AudioScalarFieldEnum = {
  audioId: "audioId",
  fileUrl: "fileUrl",
  description: "description",
  createdBy: "createdBy",
  languageId: "languageId",
  createdAt: "createdAt",
  statusCode: "statusCode",
};

exports.Prisma.ExhibitAudioRelationScalarFieldEnum = {
  audioId: "audioId",
  exhibitId: "exhibitId",
};

exports.Prisma.ExhibitScalarFieldEnum = {
  exhibitId: "exhibitId",
  title: "title",
  description: "description",
  audioId: "audioId",
  createdBy: "createdBy",
  modifiedBy: "modifiedBy",
  qrCodeId: "qrCodeId",
  imageId: "imageId",
  createdAt: "createdAt",
  modifiedAt: "modifiedAt",
  statusCode: "statusCode",
};

exports.Prisma.AuditLogScalarFieldEnum = {
  auditLogId: "auditLogId",
  userId: "userId",
  ipAddress: "ipAddress",
  entityName: "entityName",
  entityId: "entityId",
  actionType: "actionType",
  oldValue: "oldValue",
  newValue: "newValue",
  timestamp: "timestamp",
  statusCode: "statusCode",
};

exports.Prisma.PhoneNumberScalarFieldEnum = {
  phoneNumberId: "phoneNumberId",
  userId: "userId",
  phoneNumber: "phoneNumber",
  verified: "verified",
  isPrimary: "isPrimary",
  createdAt: "createdAt",
  statusCode: "statusCode",
};

exports.Prisma.EmailScalarFieldEnum = {
  emailId: "emailId",
  userId: "userId",
  email: "email",
  verified: "verified",
  isPrimary: "isPrimary",
  createdAt: "createdAt",
  statusCode: "statusCode",
};

exports.Prisma.UserRoleScalarFieldEnum = {
  userId: "userId",
  roleId: "roleId",
};

exports.Prisma.RoleScalarFieldEnum = {
  roleId: "roleId",
  roleName: "roleName",
  description: "description",
  statusCode: "statusCode",
};

exports.Prisma.QrCodeScalarFieldEnum = {
  qrCodeId: "qrCodeId",
  qrLink: "qrLink",
  createdBy: "createdBy",
  createdAt: "createdAt",
  statusCode: "statusCode",
};

exports.Prisma.ImageScalarFieldEnum = {
  imageId: "imageId",
  description: "description",
  createdBy: "createdBy",
  createdAt: "createdAt",
  statusCode: "statusCode",
};

exports.Prisma.EventScalarFieldEnum = {
  eventId: "eventId",
  sessionId: "sessionId",
  entityId: "entityId",
  entityName: "entityName",
  timestamp: "timestamp",
  usersUserId: "usersUserId",
};

exports.Prisma.SessionScalarFieldEnum = {
  sessionId: "sessionId",
  userId: "userId",
  deviceInfo: "deviceInfo",
  isActive: "isActive",
  createdAt: "createdAt",
};

exports.Prisma.UserProfileScalarFieldEnum = {
  userProfileId: "userProfileId",
  userId: "userId",
  fName: "fName",
  lName: "lName",
  languageCode: "languageCode",
  gender: "gender",
  dob: "dob",
  modifiedBy: "modifiedBy",
  createdBy: "createdBy",
  createdAt: "createdAt",
  modifiedAt: "modifiedAt",
  statusCode: "statusCode",
};

exports.Prisma.LanguageScalarFieldEnum = {
  languageCode: "languageCode",
  languageName: "languageName",
  statusCode: "statusCode",
};

exports.Prisma.SubtitleScalarFieldEnum = {
  subtitleId: "subtitleId",
  subtitleText: "subtitleText",
  languageCode: "languageCode",
  createdBy: "createdBy",
  modifiedBy: "modifiedBy",
  createdAt: "createdAt",
  modifiedAt: "modifiedAt",
  statusCode: "statusCode",
};

exports.Prisma.ExhibitSubtitleScalarFieldEnum = {
  exhibitId: "exhibitId",
  subtitleId: "subtitleId",
  createdAt: "createdAt",
};

exports.Prisma.SortOrder = {
  asc: "asc",
  desc: "desc",
};

exports.Prisma.QueryMode = {
  default: "default",
  insensitive: "insensitive",
};

exports.Prisma.NullsOrder = {
  first: "first",
  last: "last",
};

exports.Prisma.ModelName = {
  users: "users",
  status: "status",
  audio: "audio",
  exhibitAudioRelation: "exhibitAudioRelation",
  exhibit: "exhibit",
  auditLog: "auditLog",
  phoneNumber: "phoneNumber",
  email: "email",
  userRole: "userRole",
  role: "role",
  qrCode: "qrCode",
  image: "image",
  event: "event",
  session: "session",
  userProfile: "userProfile",
  language: "language",
  subtitle: "subtitle",
  exhibitSubtitle: "exhibitSubtitle",
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message;
        const runtime = getRuntime();
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message =
            "PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `" +
            runtime.prettyName +
            "`).";
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;

        throw new Error(message);
      },
    });
  }
}

exports.PrismaClient = PrismaClient;

Object.assign(exports, Prisma);
