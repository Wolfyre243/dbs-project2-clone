generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  userId           String       @id @default(uuid()) @map("user_id") @db.Uuid
  username         String       @unique @db.VarChar(30)
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  modifiedAt       DateTime     @default(now()) @map("modified_at") @db.Timestamptz(6)
  statusId         Int          @map("status_id")
  audiosCreated    audio[]      @relation("AudioCreatedBy")
  auditLogs        auditLog[]
  emails           email?
  event            event[]
  exhibitsCreated  exhibit[]    @relation("ExhibitCreatedBy")
  imagesCreated    image[]      @relation("ImageCreatedBy")
  passwords        password[]
  phoneNumbers     phoneNumber?
  qrCodesCreated   qrCode[]     @relation("QrCodeCreatedBy")
  reviews          review[]
  sessions         session[]
  subtitlesCreated subtitle[]   @relation("SubtitleCreatedBy")
  userProfile      userProfile? @relation("UserToProfile")
  userRoles        userRole?
  status           status       @relation(fields: [statusId], references: [statusId])

  @@index([statusId])
}

model status {
  statusId     Int           @id @default(autoincrement()) @map("status_id")
  statusName   String        @unique @map("status_name") @db.VarChar(30)
  audios       audio[]
  emails       email[]
  exhibits     exhibit[]
  images       image[]
  languages    language[]
  phoneNumbers phoneNumber[]
  qrcodes      qrCode[]
  roles        role[]
  subtitles    subtitle[]
  userProfiles userProfile[]
  users        users[]
}

model audio {
  audioId        String                @id @default(uuid()) @map("audio_id") @db.Uuid
  description    String?
  createdBy      String                @map("created_by") @db.Uuid
  createdAt      DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  statusId       Int                   @map("status_id")
  fileLink       String                @unique @map("file_link")
  languageCode   String                @map("language_code") @db.VarChar(6)
  audioCreatedBy users                 @relation("AudioCreatedBy", fields: [createdBy], references: [userId])
  language       language              @relation(fields: [languageCode], references: [languageCode])
  status         status                @relation(fields: [statusId], references: [statusId])
  exhibit        exhibit[]
  exhibits       exhibitAudioRelation?

  @@index([statusId, languageCode])
}

model exhibitAudioRelation {
  audioId   String  @unique @map("audio_id") @db.Uuid
  exhibitId String  @map("exhibit_id") @db.Uuid
  audio     audio   @relation(fields: [audioId], references: [audioId])
  exhibit   exhibit @relation(fields: [exhibitId], references: [exhibitId])

  @@id([audioId, exhibitId])
  @@map("exhibit_audio_relation")
}

model exhibit {
  exhibitId            String                 @id @default(uuid()) @map("exhibit_id") @db.Uuid
  title                String                 @db.VarChar(100)
  description          String?
  audioId              String                 @map("audio_id") @db.Uuid
  createdBy            String                 @map("created_by") @db.Uuid
  modifiedBy           String                 @map("modified_by") @db.Uuid
  imageId              String?                @map("image_id") @db.Uuid
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  modifiedAt           DateTime               @default(now()) @map("modified_at") @db.Timestamptz(6)
  statusId             Int                    @map("status_id")
  audio                audio                  @relation(fields: [audioId], references: [audioId])
  exhibitCreatedBy     users                  @relation("ExhibitCreatedBy", fields: [createdBy], references: [userId])
  image                image?                 @relation(fields: [imageId], references: [imageId])
  status               status                 @relation(fields: [statusId], references: [statusId])
  exhibitAudioRelation exhibitAudioRelation[]
  subtitles            exhibitSubtitle[]
  qrCode               qrCode?

  @@index([statusId, audioId, imageId])
}

model auditAction {
  actionTypeId Int        @id @default(autoincrement()) @map("action_type_id") @db.Integer
  actionType   String     @unique @map("action_type") @db.VarChar(100)
  description  String?
  auditLogs    auditLog[]

  @@map("audit_action")
}

model auditLog {
  auditLogId   String      @id @default(uuid()) @map("audit_log_id") @db.Uuid
  userId       String      @map("user_id") @db.Uuid
  ipAddress    String      @map("ip_address") @db.VarChar(45)
  entityName   String      @map("entity_name") @db.VarChar(100)
  entityId     String      @map("entity_id")
  actionTypeId Int         @map("action_type_id") @db.Integer
  logText      String      @map("log_text")
  timestamp    DateTime    @default(now()) @db.Timestamptz(6)
  auditAction  auditAction @relation(fields: [actionTypeId], references: [actionTypeId])
  user         users       @relation(fields: [userId], references: [userId])

  @@index([userId, actionTypeId])
  @@map("audit_log")
}

model phoneNumber {
  phoneNumberId String   @id @default(uuid()) @map("phone_number_id") @db.Uuid
  userId        String   @unique @map("user_id") @db.Uuid
  phoneNumber   String   @map("phone_number") @db.Char(8)
  isPrimary     Boolean  @map("is_primary")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  statusId      Int      @map("status_id")
  status        status   @relation(fields: [statusId], references: [statusId])
  user          users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, statusId])
  @@map("phone_number")
}

model email {
  emailId   String   @id @default(uuid()) @map("email_id") @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  email     String   @db.VarChar(100)
  isPrimary Boolean  @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  statusId  Int      @map("status_id")
  status    status   @relation(fields: [statusId], references: [statusId])
  user      users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, statusId])
}

model userRole {
  userId String @unique @map("user_id") @db.Uuid
  roleId Int    @map("role_id")
  role   role   @relation(fields: [roleId], references: [roleId])
  user   users  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId, roleId])
  @@map("user_role")
}

model role {
  roleId      Int        @id @default(autoincrement()) @map("role_id")
  roleName    String     @unique @map("role_name") @db.VarChar(20)
  description String?
  statusId    Int        @map("status_id")
  status      status     @relation(fields: [statusId], references: [statusId])
  userRoles   userRole[]

  @@index([statusId])
}

model qrCode {
  qrCodeId        String   @id @default(uuid()) @map("qr_code_id") @db.Uuid
  createdBy       String   @map("created_by") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  exhibitId       String   @unique @map("exhibit_id") @db.Uuid
  imageId         String   @unique @map("image_id") @db.Uuid
  statusId        Int      @map("status_id")
  qrCodeCreatedBy users    @relation("QrCodeCreatedBy", fields: [createdBy], references: [userId])
  exhibit         exhibit  @relation(fields: [exhibitId], references: [exhibitId])
  image           image    @relation(fields: [imageId], references: [imageId])
  status          status   @relation(fields: [statusId], references: [statusId])

  @@index([statusId])
  @@map("qr_code")
}

model image {
  imageId        String    @id @default(uuid()) @map("image_id") @db.Uuid
  description    String?
  createdBy      String    @map("created_by") @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  statusId       Int       @map("status_id")
  fileLink       String    @unique @map("file_link")
  exhibit        exhibit[]
  imageCreatedBy users     @relation("ImageCreatedBy", fields: [createdBy], references: [userId])
  status         status    @relation(fields: [statusId], references: [statusId])
  qrCode         qrCode?

  @@index([statusId])
}

model eventType {
  eventTypeId Int     @id @default(autoincrement()) @map("event_type_id") @db.Integer
  eventType   String  @unique @map("event_type") @db.VarChar(100)
  description String
  event       event[]

  @@map("event_type")
}

model event {
  eventId     String    @id @default(uuid()) @map("event_id") @db.Uuid
  entityId    Int       @map("entity_id")
  entityName  String    @map("entity_name") @db.VarChar(100)
  eventTypeId Int       @map("event_type_id") @db.Integer
  timestamp   DateTime  @db.Timestamptz(6)
  details     String
  userId      String    @map("user_id") @db.Uuid
  users       users     @relation(fields: [userId], references: [userId])
  eventType   eventType @relation(fields: [eventTypeId], references: [eventTypeId])

  @@index([userId, eventTypeId])
}

model session {
  sessionId  String   @id @default(uuid()) @map("session_id") @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  deviceInfo String   @map("device_info")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user       users?   @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model userProfile {
  userProfileId String   @id @default(uuid()) @map("user_profile_id") @db.Uuid
  userId        String   @unique @map("user_id") @db.Uuid
  firstName     String   @map("first_name") @db.VarChar(100)
  lastName      String   @map("last_name") @db.VarChar(100)
  languageCode  String   @map("language_code") @db.VarChar(6)
  gender        String   @db.Char(1)
  dob           DateTime @db.Date
  modifiedBy    String   @map("modified_by") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  modifiedAt    DateTime @default(now()) @map("modified_at") @db.Timestamptz(6)
  statusId      Int      @map("status_id")
  language      language @relation(fields: [languageCode], references: [languageCode])
  status        status   @relation(fields: [statusId], references: [statusId])
  user          users    @relation("UserToProfile", fields: [userId], references: [userId], onDelete: Cascade)

  @@index([statusId, languageCode])
  @@map("user_profile")
}

model language {
  languageCode String        @id @map("language_code") @db.VarChar(6)
  languageName String        @map("language_name") @db.VarChar(50)
  statusId     Int           @map("status_id")
  audio        audio[]
  status       status        @relation(fields: [statusId], references: [statusId])
  subtitle     subtitle[]
  userProfile  userProfile[]

  @@index([statusId, languageCode])
}

model subtitle {
  subtitleId        String            @id @default(uuid()) @map("subtitle_id") @db.Uuid
  subtitleText      String            @map("subtitle_text")
  languageCode      String            @map("language_code") @db.VarChar(6)
  createdBy         String            @map("created_by") @db.Uuid
  modifiedBy        String            @map("modified_by") @db.Uuid
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  modifiedAt        DateTime          @default(now()) @map("modified_at") @db.Timestamptz(6)
  statusId          Int               @map("status_id")
  exhibits          exhibitSubtitle[]
  subtitleCreatedBy users             @relation("SubtitleCreatedBy", fields: [createdBy], references: [userId])
  language          language          @relation(fields: [languageCode], references: [languageCode])
  status            status            @relation(fields: [statusId], references: [statusId])

  @@index([statusId, languageCode])
}

model exhibitSubtitle {
  exhibitId  String   @map("exhibit_id") @db.Uuid
  subtitleId String   @map("subtitle_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  exhibit    exhibit  @relation(fields: [exhibitId], references: [exhibitId])
  subtitle   subtitle @relation(fields: [subtitleId], references: [subtitleId])

  @@id([exhibitId, subtitleId])
  @@index([exhibitId, subtitleId])
  @@map("exhibit_subtitle")
}

model review {
  reviewId   String   @id @default(uuid()) @map("review_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  rating     Int
  reviewText String   @map("review_text")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  modifiedAt DateTime @default(now()) @map("modified_at") @db.Timestamptz(6)
  user       users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([rating, reviewText])
}

model password {
  passwordId String   @id @default(uuid()) @map("password_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  password   String   @db.Char(60)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user       users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
}
