const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'SDC Exhibition App API',
      version: '1.0.0',
      description: 'API documentation generated by swagger-jsdoc',
      contact: {
        name: 'SDC Exhibition App',
        email: 'contact@sdc.com',
      },
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT',
      },
    },
    servers: [
      {
        url: `http://localhost:${process.env.PORT}`,
        description: 'Local development server',
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
        },
      },
      schemas: {
        // User related schemas
        User: {
          type: 'object',
          properties: {
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique user identifier',
            },
            username: {
              type: 'string',
              maxLength: 30,
              description: 'Unique username',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'User creation timestamp',
            },
            modifiedAt: {
              type: 'string',
              format: 'date-time',
              description: 'User last modification timestamp',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
          },
          required: ['username', 'statusId'],
        },
        UserProfile: {
          type: 'object',
          properties: {
            userProfileId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique profile identifier',
            },
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User identifier',
            },
            firstName: {
              type: 'string',
              maxLength: 100,
              description: "User's first name",
            },
            lastName: {
              type: 'string',
              maxLength: 100,
              description: "User's last name",
            },
            languageCode: {
              type: 'string',
              maxLength: 6,
              description: 'Language code',
            },
            gender: {
              type: 'string',
              maxLength: 1,
              description: "User's gender",
            },
            dob: {
              type: 'string',
              format: 'date',
              description: 'Date of birth',
            },
            modifiedBy: {
              type: 'string',
              format: 'uuid',
              description: 'User who modified the profile',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Profile creation timestamp',
            },
            modifiedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Profile last modification timestamp',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
          },
          required: [
            'userId',
            'firstName',
            'lastName',
            'languageCode',
            'gender',
            'dob',
            'modifiedBy',
            'statusId',
          ],
        },
        Email: {
          type: 'object',
          properties: {
            emailId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique email identifier',
            },
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User identifier',
            },
            email: {
              type: 'string',
              format: 'email',
              maxLength: 100,
              description: 'Email address',
            },
            isPrimary: {
              type: 'boolean',
              description: 'Whether this is the primary email',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Email creation timestamp',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
          },
          required: ['userId', 'email', 'isPrimary', 'statusId'],
        },
        PhoneNumber: {
          type: 'object',
          properties: {
            phoneNumberId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique phone number identifier',
            },
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User identifier',
            },
            phoneNumber: {
              type: 'string',
              maxLength: 8,
              description: 'Phone number',
            },
            isPrimary: {
              type: 'boolean',
              description: 'Whether this is the primary phone number',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Phone number creation timestamp',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
          },
          required: ['userId', 'phoneNumber', 'isPrimary', 'statusId'],
        },
        Password: {
          type: 'object',
          properties: {
            passwordId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique password identifier',
            },
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User identifier',
            },
            password: {
              type: 'string',
              maxLength: 60,
              description: 'Hashed password',
            },
            isActive: {
              type: 'boolean',
              description: 'Whether the password is active',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Password creation timestamp',
            },
          },
          required: ['userId', 'password'],
        },
        UserRole: {
          type: 'object',
          properties: {
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User identifier',
            },
            roleId: {
              type: 'integer',
              description: 'Role identifier',
            },
          },
          required: ['userId', 'roleId'],
        },
        Role: {
          type: 'object',
          properties: {
            roleId: {
              type: 'integer',
              description: 'Unique role identifier',
            },
            roleName: {
              type: 'string',
              maxLength: 20,
              description: 'Role name',
            },
            description: {
              type: 'string',
              description: 'Role description',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
          },
          required: ['roleName', 'statusId'],
        },
        Session: {
          type: 'object',
          properties: {
            sessionId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique session identifier',
            },
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User identifier',
            },
            deviceInfo: {
              type: 'string',
              description: 'Device information',
            },
            isActive: {
              type: 'boolean',
              description: 'Whether the session is active',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Session creation timestamp',
            },
          },
          required: ['deviceInfo'],
        },

        // Status and Language schemas
        Status: {
          type: 'object',
          properties: {
            statusId: {
              type: 'integer',
              description: 'Unique status identifier',
            },
            statusName: {
              type: 'string',
              maxLength: 30,
              description: 'Status name',
            },
          },
          required: ['statusName'],
        },
        Language: {
          type: 'object',
          properties: {
            languageCode: {
              type: 'string',
              maxLength: 6,
              description: 'Language code',
            },
            languageName: {
              type: 'string',
              maxLength: 50,
              description: 'Language name',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
          },
          required: ['languageCode', 'languageName', 'statusId'],
        },

        // Content related schemas
        Audio: {
          type: 'object',
          properties: {
            audioId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique audio identifier',
            },
            description: {
              type: 'string',
              description: 'Audio description',
            },
            createdBy: {
              type: 'string',
              format: 'uuid',
              description: 'User who created the audio',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Audio creation timestamp',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
            fileLink: {
              type: 'string',
              description: 'Audio file link',
            },
            fileName: {
              type: 'string',
              description: 'Audio file name',
            },
            languageCode: {
              type: 'string',
              maxLength: 6,
              description: 'Language code',
            },
          },
          required: [
            'createdBy',
            'statusId',
            'fileLink',
            'fileName',
            'languageCode',
          ],
        },
        Image: {
          type: 'object',
          properties: {
            imageId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique image identifier',
            },
            description: {
              type: 'string',
              description: 'Image description',
            },
            createdBy: {
              type: 'string',
              format: 'uuid',
              description: 'User who created the image',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Image creation timestamp',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
            fileLink: {
              type: 'string',
              description: 'Image file link',
            },
            fileName: {
              type: 'string',
              description: 'Image file name',
            },
          },
          required: ['createdBy', 'statusId', 'fileLink', 'fileName'],
        },
        Subtitle: {
          type: 'object',
          properties: {
            subtitleId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique subtitle identifier',
            },
            subtitleText: {
              type: 'string',
              description: 'Subtitle text content',
            },
            languageCode: {
              type: 'string',
              maxLength: 6,
              description: 'Language code',
            },
            createdBy: {
              type: 'string',
              format: 'uuid',
              description: 'User who created the subtitle',
            },
            modifiedBy: {
              type: 'string',
              format: 'uuid',
              description: 'User who modified the subtitle',
            },
            audioId: {
              type: 'string',
              format: 'uuid',
              description: 'Associated audio identifier',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Subtitle creation timestamp',
            },
            modifiedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Subtitle last modification timestamp',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
            wordTimings: {
              type: 'object',
              description: 'Word timing data in JSON format',
            },
          },
          required: [
            'subtitleText',
            'languageCode',
            'createdBy',
            'modifiedBy',
            'statusId',
          ],
        },

        // Exhibit related schemas
        Exhibit: {
          type: 'object',
          properties: {
            exhibitId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique exhibit identifier',
            },
            title: {
              type: 'string',
              maxLength: 100,
              description: 'Exhibit title',
            },
            description: {
              type: 'string',
              description: 'Exhibit description',
            },
            createdBy: {
              type: 'string',
              format: 'uuid',
              description: 'User who created the exhibit',
            },
            modifiedBy: {
              type: 'string',
              format: 'uuid',
              description: 'User who modified the exhibit',
            },
            imageId: {
              type: 'string',
              format: 'uuid',
              description: 'Associated image identifier',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Exhibit creation timestamp',
            },
            modifiedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Exhibit last modification timestamp',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
          },
          required: ['title', 'createdBy', 'modifiedBy', 'statusId'],
        },
        ExhibitSubtitle: {
          type: 'object',
          properties: {
            exhibitId: {
              type: 'string',
              format: 'uuid',
              description: 'Exhibit identifier',
            },
            subtitleId: {
              type: 'string',
              format: 'uuid',
              description: 'Subtitle identifier',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Association creation timestamp',
            },
          },
          required: ['exhibitId', 'subtitleId'],
        },
        QrCode: {
          type: 'object',
          properties: {
            qrCodeId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique QR code identifier',
            },
            createdBy: {
              type: 'string',
              format: 'uuid',
              description: 'User who created the QR code',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'QR code creation timestamp',
            },
            url: {
              type: 'string',
              description: 'QR code URL',
            },
            exhibitId: {
              type: 'string',
              format: 'uuid',
              description: 'Associated exhibit identifier',
            },
            imageId: {
              type: 'string',
              format: 'uuid',
              description: 'Associated image identifier',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
          },
          required: ['createdBy', 'exhibitId', 'imageId', 'statusId'],
        },

        // Review schema
        Review: {
          type: 'object',
          properties: {
            reviewId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique review identifier',
            },
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User who wrote the review',
            },
            rating: {
              type: 'integer',
              description: 'Review rating',
            },
            reviewText: {
              type: 'string',
              description: 'Review text content',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Review creation timestamp',
            },
            modifiedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Review last modification timestamp',
            },
          },
          required: ['userId', 'rating', 'reviewText'],
        },

        // Audit and Event schemas
        AuditAction: {
          type: 'object',
          properties: {
            actionTypeId: {
              type: 'integer',
              description: 'Unique action type identifier',
            },
            actionType: {
              type: 'string',
              maxLength: 100,
              description: 'Action type name',
            },
            description: {
              type: 'string',
              description: 'Action type description',
            },
          },
          required: ['actionType'],
        },
        AuditLog: {
          type: 'object',
          properties: {
            auditLogId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique audit log identifier',
            },
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User who performed the action',
            },
            ipAddress: {
              type: 'string',
              maxLength: 45,
              description: 'IP address',
            },
            entityName: {
              type: 'string',
              maxLength: 100,
              description: 'Entity name',
            },
            entityId: {
              type: 'string',
              description: 'Entity identifier',
            },
            actionTypeId: {
              type: 'integer',
              description: 'Action type identifier',
            },
            logText: {
              type: 'string',
              description: 'Log text content',
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              description: 'Audit log timestamp',
            },
          },
          required: [
            'userId',
            'ipAddress',
            'entityName',
            'entityId',
            'actionTypeId',
            'logText',
          ],
        },
        EventType: {
          type: 'object',
          properties: {
            eventTypeId: {
              type: 'integer',
              description: 'Unique event type identifier',
            },
            eventType: {
              type: 'string',
              maxLength: 100,
              description: 'Event type name',
            },
            description: {
              type: 'string',
              description: 'Event type description',
            },
          },
          required: ['eventType', 'description'],
        },
        Event: {
          type: 'object',
          properties: {
            eventId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique event identifier',
            },
            entityId: {
              type: 'string',
              description: 'Entity identifier',
            },
            entityName: {
              type: 'string',
              maxLength: 100,
              description: 'Entity name',
            },
            eventTypeId: {
              type: 'integer',
              description: 'Event type identifier',
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              description: 'Event timestamp',
            },
            details: {
              type: 'string',
              description: 'Event details',
            },
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User who triggered the event',
            },
            metadata: {
              type: 'object',
              description: 'Event metadata in JSON format',
            },
          },
          required: [
            'entityId',
            'entityName',
            'eventTypeId',
            'details',
            'userId',
          ],
        },

        // Assistant related schemas
        SenderType: {
          type: 'object',
          properties: {
            senderTypeId: {
              type: 'integer',
              description: 'Unique sender type identifier',
            },
            senderType: {
              type: 'string',
              maxLength: 30,
              description: 'Sender type name',
            },
          },
          required: ['senderType'],
        },
        Conversation: {
          type: 'object',
          properties: {
            conversationId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique conversation identifier',
            },
            userId: {
              type: 'string',
              format: 'uuid',
              description: 'User identifier',
            },
            title: {
              type: 'string',
              maxLength: 100,
              description: 'Conversation title',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Conversation creation timestamp',
            },
            modifiedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Conversation last modification timestamp',
            },
          },
          required: ['userId', 'statusId'],
        },
        Message: {
          type: 'object',
          properties: {
            messageId: {
              type: 'string',
              format: 'uuid',
              description: 'Unique message identifier',
            },
            conversationId: {
              type: 'string',
              format: 'uuid',
              description: 'Conversation identifier',
            },
            senderTypeId: {
              type: 'integer',
              description: 'Sender type identifier',
            },
            content: {
              type: 'string',
              description: 'Message content',
            },
            metadata: {
              type: 'object',
              description: 'Message metadata in JSON format',
            },
            statusId: {
              type: 'integer',
              description: 'Status identifier',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Message creation timestamp',
            },
          },
          required: ['conversationId', 'senderTypeId', 'content', 'statusId'],
        },

        // Common response schemas
        Error: {
          type: 'object',
          properties: {
            error: {
              type: 'string',
              description: 'Error message',
            },
            statusCode: {
              type: 'integer',
              description: 'HTTP status code',
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              description: 'Error timestamp',
            },
          },
        },
        Success: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Success message',
            },
            data: {
              type: 'object',
              description: 'Response data',
            },
          },
        },
        PaginatedResponse: {
          type: 'object',
          properties: {
            data: {
              type: 'array',
              description: 'Array of items',
            },
            pagination: {
              type: 'object',
              properties: {
                page: {
                  type: 'integer',
                  description: 'Current page number',
                },
                limit: {
                  type: 'integer',
                  description: 'Items per page',
                },
                total: {
                  type: 'integer',
                  description: 'Total number of items',
                },
                totalPages: {
                  type: 'integer',
                  description: 'Total number of pages',
                },
              },
            },
          },
        },
      },
    },
    security: [
      {
        bearerAuth: [],
      },
    ],
  },
  apis: ['./src/routes/*.js', './src/controllers/*.js'],
};

const specs = swaggerJsdoc(options);

function setupSwagger(app) {
  app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
}

module.exports = setupSwagger;
